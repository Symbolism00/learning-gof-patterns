package command;

public class Main {

    public static void main(String[] args) throws InterruptedException {

        // assume-se que se quer criar um desenho que cont√©m uma imagem de um c√£o
        // uma linha reta e um texto aleat√≥rio. O padr√£o Command permite de forma
        // din√¢mica criar diferentes comandos para o mesmo desenho sem que a
        // adi√ß√£o de novos comandos interfiram com os comandos previamente criados
        // Por norma, este padr√£o indica que todos os comandos devem conter uma
        // opera√ß√£o de execute() ou do() e outra de unexecute() ou undo()
        // Assim, para cada tipo de comando, existir√£o:
        // Comando de linha: que permite adicionar e remover uma linha ao desenho
        // Comando de Texto: que permite adicionar e remover um texto ao desenho
        // Comando de Imagem: que permite adicionar e remover uma imagem ao desenho
        // No exemplo seguinte os comandos de adi√ß√£o e remo√ß√£o s√£o muito simples,
        // por√©m a implementa√ß√£o de cada um pode variar de comando para comando
        // Sempre que se quer executar um comando, √© necess√°rio criar um e
        // pedir para que CommandInvoker execute o mesmo, esta classe n√£o tem
        // qualquer conhecimento sobre que objeto √© que ir√° executar o comando
        // apenas sabe que tem que executar um comando, por exemplo desenhar uma linha,
        // desenhar uma imagem, ou desenhar um texto.
        // O facto do invocador de comandos n√£o ter conhecimento sobre o objeto alvo,
        // permite que diferente comandos com diferentes alvos ou implementa√ß√µes
        // sejam executados para o mesmo invocador.
        // -> Diferentes invocadores: Por exemplo o invocador A poderia no futuro em vez de
        //                            executar comandos para um Paint, poderia executar para um Diagram.
        // -> Diferentes implementa√ß√µes: Por exemplo o invocador A com o comando A que executava
        //                               os passos 1 -> 2 -> 3, no futuro podia ter este comando alterado
        //                               para o comando B que executava os passos 4 -> 2 -> 5 -> 1
        // Este padr√£o tamb√©m permite criar diferentes combina√ß√µes de comandos para diferentes
        // invocadores, por exemplo o CommandInvokerSimplePaint que s√≥ consegue desenhar
        // texto e linhas e o CommandInvokerComplexPaint que consegue desenhar texto, linhas,
        // imagens, gr√°ficos, formas geom√©tricas, etc (cada um destes desenhos teria o seu comando)
        // Por fim, outro ponto importante √© que o invocador pode apresentar uma lista de
        // comandos a serem executados (por exemplo, primeiramente s√£o todos guardados numa stack
        // e depois de X em X segundos, estes v√£o sendo executados). Neste exemplo isso n√£o
        // acontece, uma vez que sempre que um comando √© logo executado quando o utilizador
        // realiza uma a√ß√£o

        // cria um novo desenho
        Paint paint = new Paint();
        // cria um invocador de comandos que v√£o realizar opera√ß√µes sobre o desenho
        CommandInvoker commandInvoker = new CommandInvoker();

        Image dog = new Image("dog.png", 13.5, 10.0); // imagem de um c√£o a ser desenhada
        // cria um comando de imagem que executa a opera√ß√£o de desenhar a imagem (neste caso um c√£o)
        commandInvoker.executeCommand(new ImageCommand(paint, dog));
        System.out.println(paint.showPainting()); // visualiza o que j√° est√° no desenho
        Thread.sleep(3000); // 3 segundos depois desenha-se outro objeto

        Line line1 = new Line(1.3, 2.6, 10.4, 11.1); // linha 1 a ser desenhada
        // cria um comando de linha que executa a opera√ß√£o de desenhar a linha 1
        commandInvoker.executeCommand(new LineCommand(paint, line1));
        System.out.println(paint.showPainting()); // visualiza o que j√° est√° no desenho
        Thread.sleep(2000); // 2 segundos depois desenha-se outro objeto

        Line line2 = new Line(3.5, 6.6, 3.4, 10.0); // linha 2 a ser desenhada
        // cria um comando de linha que executa a opera√ß√£o de desenhar a linha 2
        commandInvoker.executeCommand(new LineCommand(paint, line2));
        System.out.println(paint.showPainting()); // visualiza o que j√° est√° no desenho
        commandInvoker.unexecuteCommand(); // remove-se a √∫ltima opera√ß√£o realizada (linha 2 √© removida)
        System.out.println(paint.showPainting()); // visualiza o que j√° est√° no desenho
        Thread.sleep(5000); // 5 segundos depois desenha-se outro objeto

        Text text = new Text("It's a dog! üê∂", 7.5, 10.3); // texto a ser desenhado
        // cria um comando de texto que executa a opera√ß√£o de desenhar o texto
        commandInvoker.executeCommand(new TextCommand(paint, text));
        System.out.println(paint.showPainting()); // visualiza o que j√° est√° no desenho
        Thread.sleep(4000); // 4 segundos depois apaga-se tudo

        commandInvoker.unexecuteCommand(); // elimina o texto
        System.out.println(paint.showPainting()); // verifica que s√≥ tem uma linha uma imagem de um c√£o
        commandInvoker.unexecuteCommand(); // elimina a linha
        System.out.println(paint.showPainting()); // verifica que s√≥ tem uma imagem do c√£o
        commandInvoker.unexecuteCommand(); // elimina a imagem do c√£o
        System.out.println(paint.showPainting()); // visualiza que n√£o tem qualquer objeto desenhado no desenho

        // No futuro, caso seja necess√°rio novos comandos de desenho (GraphCommand, CircleCommand, etc),
        // ent√£o cria-se um novo comando e um novo objeto que representa esse desenho (Graph, Circle, etc)
        // sem ocorrer altera√ß√£o nas outras classes j√° criadas (Open-Closed Principle!)
    }
}
